<?xml version="1.0" encoding="UTF-8"?>
<project name="Rendering" default="help">

	<target name="help">
		<fail message="DO NOT CALL THIS FILE DIRECTLY; INSTEAD USE build.xml" />
	</target>

	<target name="render" description="render the documentation!">
		<phingcall target="render.renderHtml" />
		<phingcall target="render.renderPdf" />
	</target>

	<target name="render.renderHtml" depends="render.checkPrerequisites, render.setupBuildDirectory">
		<echo>Rendering HTML</echo>
		<php function="mt_rand" returnProperty="randomValue" />
		<property name="temporaryOutputDirectory" value="${directory.temporaryDirectory}/output/${randomValue}/" />
		<resolvepath propertyName="xml.catalog" file="${directory.temporaryDirectory}/catalog.xml"/>

		<exec command="XML_CATALOG_FILES='catalog.xml  file://${xml.catalog}' XML_DEBUG_CATALOG=1 ${prerequisite.xsltproc.path}xsltproc --xinclude --stringparam base.dir ${temporaryOutputDirectory} ${directory.docBookAdjustments}/html.xsl ${docBookSources.inputFileAndDirectory}" />

		<delete dir="${output.html}" />
		<mkdir dir="${output.html}" />
		<move file="${temporaryOutputDirectory}" tofile="${output.html}" />
	</target>

	<target name="render.renderPdf" depends="render.checkPrerequisites, render.setupBuildDirectory">
		<echo>Rendering PDF</echo>
		<php function="mt_rand" returnProperty="randomValue" />
		<property name="temporaryOutputFile" value="${directory.temporaryDirectory}/output/fo_temporary_${randomValue}" />
		<resolvepath propertyName="xml.catalog" file="${directory.temporaryDirectory}/catalog.xml"/>

		<exec command="XML_CATALOG_FILES='catalog.xml  file://${xml.catalog}' XML_DEBUG_CATALOG=1 ${prerequisite.xsltproc.path}xsltproc --xinclude --output  ${temporaryOutputFile}.fo ${directory.docBookAdjustments}/fop.xsl ${docBookSources.inputFileAndDirectory}" />

		<exec command="${prerequisite.fop.command} -fo ${temporaryOutputFile}.fo  ${temporaryOutputFile}.pdf" />

		<delete file="${output.pdf}" />

		<php function="dirname" returnProperty="baseDirectory">
			<param value="${output.pdf}" />
		</php>
		<mkdir dir="${baseDirectory}" />
		<move file="${temporaryOutputFile}.pdf" tofile="${output.pdf}" />
		<delete file="${temporaryOutputFile}.fo" />
	</target>

	<target name="render.checkPrerequisites">
		<mkdir dir="${directory.resourcesDirectory}" />

		<phingcall target="helpers.downloadAndUnzipIfNotExists">
			<property name="title" value="DocBook XSL Stylesheets" />
			<property name="directory" value="${prerequisite.docbook-xsl-ns.directory}" />
			<property name="url" value="${prerequisite.docbook-xsl-ns.url}" />
			<property name="zipFileName" value="${prerequisite.docbook-xsl-ns.zipFileName}" />
		</phingcall>

		<phingcall target="helpers.downloadAndUnzipIfNotExists">
			<property name="title" value="FOP" />
			<property name="directory" value="${prerequisite.fop.directory}" />
			<property name="url" value="${prerequisite.fop.url}" />
			<property name="zipFileName" value="${prerequisite.fop.zipFileName}" />
		</phingcall>

		<echo>Checking existence of xsltproc</echo>
		<exec command="${prerequisite.xsltproc.path}xsltproc --version" returnProperty="xsltproc.returnCode" />
		<condition property="xsltproc.available"><isfalse value="${xsltproc.returnCode}" /></condition>
		<fail unless="xsltproc.available" message="xsltproc not found in $PATH. Make sure to set prerequisite.xsltproc.path to the correct directory (and make sure to add a trailing slash!)" />

		<echo>Checking existence of java</echo>
		<exec command="${prerequisite.java.path}java -version" returnProperty="java.returnCode" />
		<condition property="java.available"><isfalse value="${java.returnCode}" /></condition>
		<fail unless="java.available" message="java not found in $PATH. Make sure to set prerequisite.java.path to the correct directory (and make sure to add a trailing slash!)" />

	</target>

	<target name="render.setupBuildDirectory">
		<mkdir dir="${directory.temporaryDirectory}" />

		<resolvepath propertyName="docbook-xsl-ns.absoluteDirectory" file="${prerequisite.docbook-xsl-ns.directory}" />
		<copy todir="${directory.temporaryDirectory}">
			<filterchain>
				<replacetokens begintoken="{" endtoken="}">
					<token key="docbook-xsl-ns.absoluteDirectory" value="${docbook-xsl-ns.absoluteDirectory}" />
				</replacetokens>
			</filterchain>
			<fileset dir="${directory.docBookAdjustments}">
				<include name="catalog.xml"/>
			</fileset>
		</copy>
	</target>
</project>